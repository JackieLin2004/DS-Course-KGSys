head,relation,tail
数据,是,所有能输入到计算机中并被计算机程序处理的符号的总称
数据元素,是,数据的基本单位
数据对象,是,性质相同的数据元素的集合
数据对象,是,数据的一个子集
数据结构,是,相互之间存在一种或多种特定关系的数据元素的集合
数据结构,包含,集合
数据结构,包含,线性结构
数据结构,包含,树形结构
数据结构,包含,图状结构或网状结构
逻辑结构,是,数据元素之间的逻辑关系
物理结构,是,数据结构在计算机中的表示
物理结构,包括,数据元素的表示
物理结构,包括,关系的表示
数据元素之间关系的表示方法,有,顺序映像
数据元素之间关系的表示方法,有,非顺序映像
顺序映像,存储结构,顺序存储结构
非顺序映像,存储结构,链式存储结构
顺序映像,特点,借助元素在存储器中的相对位置来表示数据元素之间的逻辑关系
非顺序映像,特点,借助指示元素存储地址的指针表示数据元素之间的逻辑关系
算法设计,取决于,选定的数据(逻辑)结构
算法实现,依赖于,采用的存储结构
数据类型,包括,非结构的原子类型
数据类型,包括,结构类型
原子类型,包括,基本类型
原子类型,包括,指针类型
原子类型,包括,空类型
基本类型,包括,整型
基本类型,包括,实型
基本类型,包括,字符型
基本类型,包括,枚举类型
结构类型,是,由一种数据结构和定义在其上的一组操作组成
抽象数据类型,是,一个数学模型以及定义在该模型上的一组操作
抽象数据类型,包括,原子类型
抽象数据类型,包括,固定聚合类型
抽象数据类型,包括,可变聚合类型
赋值语句,包括,简单赋值
赋值语句,包括,串联赋值
赋值语句,包括,成组赋值
赋值语句,包括,交换赋值
赋值语句,包括,条件赋值
选择语句,包括,if语句
选择语句,包括,if-else语句
选择语句,包括,for语句
循环语句,包括,while语句
循环语句,包括,do-while语句
结束语句,包括,函数结束语句return
结束语句,包括,case结束语句break
结束语句,包括,异常结束语句exit
输入和输出语句,包括,输入语句scanf
输入和输出语句,包括,输出语句printf
注释,包括,单行注释//文字序列
逻辑运算,包括,与运算&&
逻辑运算,包括,或运算||
算法,是,对特定问题求解步骤的一种描述
算法,特性,有穷性
算法,特性,确定性
算法,特性,可行性
算法,特性,输入
算法,特性,输出
算法设计,要求,正确性
算法设计,要求,可读性
算法设计,要求,健壮性
算法设计,要求,效率与低存储量需求
算法设计,要求,正确性
算法,包括,控制结构
算法,包括,原操作
控制结构,包括,顺序
控制结构,包括,分支
控制结构,包括,循环
原操作,包括,固有数据类型的操作
时间复杂度,表示,随问题规模 n 的增大算法执行时间的增长率和算法中基本操作重复执行的次数是问题规模n的某个函数的增长率相同
时间复杂度,是,算法所需时间的量度
空间复杂度,是,算法所需存储空间的量度
线性结构,特点,存在惟一的一个被称做“第一个”的数据元素
线性结构,特点,存在惟一的一个被称做“最后一个”的数据元素
线性结构,特点,除第一个之外集合中的每个数据元素均只有一个前驱
线性结构,特点,除最后一个之外集合中每个数据元素均只有一个后继
线性表,是,n个数据元素的有限序列
线性表长度,是,线性表中元素的个数n(n≥0)
线性表的顺序表示,是,用一组地址连续的存储单元依次存储线性表的数据元素
顺序表,是,顺序存储结构或顺序映像的线性表
顺序存储结构,特点,逻辑关系上相邻的两个元素在物理位置上也相邻
链式存储结构,特点,用一组任意的存储单元存储线性表的数据元素
结点,包括,数据域
结点,包括,指针域
数据域,存储,数据
指针域,存储,指针
链表,是,由n个结点链结而成
链表,是,线性表的链式存储结构
线性表的链式存储结构,包括,单链表
线性表的链式存储结构,包括,循环链表
线性表的链式存储结构,包括,双向链表
单链表,是,结点只包含一个指针域的链表
循环链表,特点,表中最后一个结点的指针域指向头结点使整个链表形成一个环
双向链表,特点,有两个指针域且其一指向直接后继同时另一指向直接前趋
栈,是,限定仅在表尾进行插入或删除操作的线性表
栈,是,一种后进先出(last in first out)的线性表
栈的应用,有,数制转换
栈的应用,有,括号匹配的检验
栈的应用,有,行编辑程序
栈的应用,有,迷宫求解
栈的应用,有,表达式求值
栈的应用,有,实现递归
经典递归问题,有,求斐波那契数列
经典递归问题,有,八皇后问题
经典递归问题,有,Hanoi 塔问题
递归工作栈,是,作为整个递归函数运行期间使用的数据存储区
队列,是,一种先进先出(first in first out)的线性表
队列,有,链队列
队列,有,循环队列
链队列,是,用链表表示的队列
字符串数据,是,计算机上大多数的非数值处理的对象
字符串,是,由零个或多个字符组成的有限序列
串的长度,是,串中字符的数目n
字符串,是,由零个或多个字符组成的有限序列
字符串相等,是,两个串的长度相等并且各个对应位置的字符都相等
字符串,存储结构,定长顺序存储
字符串,存储结构,,堆分配存储
字符串,存储结构,,块链存储
定长顺序存储,是,用一组地址连续的存储单元存储串值的字符序列且长度固定
堆分配存储,是,用一组地址连续的存储单元存储串值的字符序列且存储空间是在程序执行过程中动态分配而得
子串的定位操作,称做,串的模式匹配
串的模式匹配,有,朴素模式匹配算法
串的模式匹配,特点,指示主串的指针不需回溯
KMP算法,有,KMP算法
串的操作,有,文本编辑
串的操作,有,建立词索引表
n维数组,是,线性表的推广
二维数组,可看作,m 行 n 列的矩阵
二维数组,有,以列序为主序(column major order)的存储方式
二维数组,有,以行序为主序(column major order)的存储方式
特殊矩阵,是,值相同的元素或者零元素在矩阵中的分布有一定规律的矩阵
对称矩阵,是,主对角线两侧元素相同的矩阵
下(上)三角矩阵,是,矩阵的上(下)三角(不包括对角线)中的元均为常数c或零的矩阵
对称矩阵的压缩存储,是,只存储其下(上)三角中的元
下(上)三角矩阵的压缩存储,是,存储其下(上)三角中的元再加一个存储常数c的存储空间
稀疏矩阵的压缩存储,是,存储稀疏矩阵的非零元同时记下它所在行和列的位置(i,j) 
三元组顺序表,是,稀疏矩阵的一种压缩存储方式
广义表,是,线性表的推广
广义表,性质,广义表的元素可以是子表
广义表,性质,广义表可为其他广义表所共享
广义表,性质,广义表可以是一个递归的表
广义表的应用,有,m元多项式的表示
树型结构,是,非线性数据结构
树,是,n(n≥0)个结点的有限集
树,特点,有且仅有一个特定的称为根(Root)的结点
树,特点,当n>1时其余结点可分为m(m>0)个互不相交的子树
树的结构定义,是,一个递归的定义
树的结点,包含,一个数据元素
树的结点,包含,若干指向其子树的分支
结点的度,是,结点拥有的子树数
度不为0的结点,是,非终端结点或分支结点
内部结点,是,除根结点之外的分支结点
结点的子树的根,是,该结点的孩子结点
结点的根,是,该结点的双亲结点
兄弟结点,是,同一个双亲的若干孩子结点
树的深度,是,树中结点的最大层次
有序树,是,树中结点的各子树看成从左至右是有次序的树
无序树,是,树中结点的各子树看成从左至右是无次序的树
森林,是,m(m≥0)棵互不相交的树的集合
二叉树,特点,每个结点至多只有两棵子树(即二叉树中不存在度大于2的结点)
二叉树,性质,在二叉树的第i层上至多有2的i次方个结点(i≥1)
二叉树,性质,深度为k的二叉树至多有(2的k次方-1)个结点(k≥1)
二叉树,性质,若终端结点数为n0且度为2的结点数为n2则n0=n2+1
二叉树,性质,具有n个结点的完全二叉树的深度为[log2n]+1
二叉树,存储结构,顺序存储结构
二叉树,存储结构,链式存储结构
二叉树的顺序存储结构,是,用一组地址连续的存储单元依次自上而下、自左至右存储完全二叉树上的结点元素(即将完全二叉树上编号为i的结点元素存储在定义的一维数组中下标为i-1的分量中)
二叉树的链表的结点,至少包含,数据域和左右指针域
遍历二叉树,方法,先(根)序遍历
遍历二叉树,方法,中(根)序遍历
遍历二叉树,方法,后(根)序遍历
先(根)序遍历,操作步骤,(1)访问根结点
先(根)序遍历,操作步骤,(2)先序遍历左子树
先(根)序遍历,操作步骤,(3)先序遍历右子树
中(根)序遍历,操作步骤,(1)中序遍历左子树
中(根)序遍历,操作步骤,(2)访问根结点
中(根)序遍历,操作步骤,(3)中序遍历右子树
后(根)序遍历,操作步骤,(1)后序遍历左子树
后(根)序遍历,操作步骤,(2)后序遍历右子树
后(根)序遍历,操作步骤,(3)访问根结点
线索链表,是,结点增加两个标志域的二叉链表
线索,是,指向结点前驱和后继的指针
线索二叉树,是,加上线索的二叉树
线索化,是,对二叉树以某种次序遍历使其变为线索二叉树的过程
树的链表结构,有,双亲表示法
树的链表结构,有,孩子表示法
树的链表结构,有,孩子兄弟表示法
森林遍历,方法,先序遍历
森林遍历,方法,中序遍历
先序遍历,操作步骤,(1)访问森林中第一棵树的根结点
先序遍历,操作步骤,(2)先序遍历第一棵树中根结点的子树森林
先序遍历,操作步骤,(3)先序遍历除去第一棵树之后剩余的树构成的森林
中序遍历,操作步骤,(1)中序遍历森林中第一棵树的根结点的子树森林
中序遍历,操作步骤,(2)访问第一棵树的根结点
中序遍历,操作步骤,(3)中序遍历除去第一棵树之后剩余的树构成的森林
赫夫曼树,是,带权路径长度最短的树
路径,是,从树中一个结点到另一个结点之间的分支
路径长度,是,路径上的分支数目
树的路径长度,是,从树根到每一结点的路径长度之和
完全二叉树,是,路径长度最短的二叉树
结点的带权路径长度,是,从该结点到树根之间的路径长度与结点上权的乘积
树的带权路径长度,是,树中所有叶子结点的带权路径长度之和
最优二叉树,是,带权路径长度WPL 最小的二叉树
前缀编码(赫夫曼编码),是,任一个字符的编码都不是另一个字符的编码的前缀的编码

